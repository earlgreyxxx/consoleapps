<#@ include file="ParseXmlFile.tt" #>namespace <#= Database.NameSpace #>
{
<#
    SqlConnectionStringBuilder stringBuilder = new();
    stringBuilder.DataSource = Database.DataSource;
    stringBuilder.InitialCatalog = Database.InitialCatalog;
    stringBuilder.UserID = Database.UserID;
    stringBuilder.Password = Database.Password;
    stringBuilder.TrustServerCertificate = true;

    using(var conn = new SqlConnection(stringBuilder.ConnectionString))
    {
      conn.Open();
      foreach(var table in Model.Tables)
      {
        string tableName = table.Table;
        string className = table.ClassName;
        if(string.IsNullOrEmpty(className))
        {
          className = char.ToUpper(tableName[0]) + tableName.Substring(1);
          className = Regex.Replace(className,@"_(\w)",match => match.Groups[1].Value.ToUpper());
        }

        List<Columns> list = new();
        string query = string.Format(Columns.SQL, Database.Schema, tableName);
        SqlCommand cmd = new(query, conn);
        using (var rd = cmd.ExecuteReader())
        {
          while(rd.Read())
            list.Add(new Columns(rd));
        }
#>
  /// <summary>
  /// <#= tableName #>より生成されたクラス
  /// </summary>
  internal class <#= className #>
  {
    // statics
    // -------------------------------------------------------------
    public static string SQL { get; } = @"SELECT <#= string.Join(",", list.Select(r => $"[{r.COLUMN_NAME}]").ToArray()) #> FROM [<#= tableName #>]";
    public static bool ReadOnly { get; } = false;

    // instances
    // -------------------------------------------------------------
<#
    foreach(var col in list)
    {
#>
    <#= col.GetProperty() #>
<#
    }
#>

    public void SetDataSample(string[] fields)
    {
<#
      var i = 0;
      foreach(var col in list)
      {
#>
      <#= col.GetSetData(i++) #>
<#
      }
#>
    }
  }
<#
      }
    }
#>
}
<#+
  public string hostName { set; get; }
  public string databaseName { set; get; }
  public string dbuser { set; get; }
  public string loginName { set; get; }
  public string passwd { set; get; }
  public List<string> tables {set; get; }

  class Columns {
      public string TABLE_NAME { get; set; }
      public string COLUMN_NAME { get; set; }
      public int ORDINAL_POSITION { get; set; }
      public string IS_NULLABLE { get; set; }
      public string DATA_TYPE { get; set; }
      public int? CHARACTER_MAXIMUM_LENGTH { get; set; }
      public byte? NUMERIC_PRECISION { get; set; }
      public int? NUMERIC_SCALE { get; set; }
      private bool ColumnIncludeHyphen = false;

      public static string SQL = @"
SELECT
  TABLE_NAME,
  COLUMN_NAME,
  ORDINAL_POSITION,
  IS_NULLABLE,
  DATA_TYPE, 
  CHARACTER_MAXIMUM_LENGTH,
  NUMERIC_PRECISION,
  NUMERIC_SCALE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_SCHEMA = '{0}' AND TABLE_NAME = '{1}'
ORDER BY ORDINAL_POSITION
";

      public Columns()
      {

      }

      public Columns(SqlDataReader rd)
      {
        TABLE_NAME = rd.GetString(0);
        COLUMN_NAME = rd.GetString(1);
        ORDINAL_POSITION = rd.GetInt32(2);
        IS_NULLABLE = rd.GetString(3);
        DATA_TYPE = rd.GetString(4);
        CHARACTER_MAXIMUM_LENGTH = rd.IsDBNull(5) ? (int?)null : rd.GetInt32(5);
        NUMERIC_PRECISION = rd.IsDBNull(6) ?  (byte?)null : rd.GetByte(6);
        NUMERIC_SCALE = rd.IsDBNull(7) ? (int?)null : rd.GetInt32(7);
        ColumnIncludeHyphen = COLUMN_NAME.Contains('-');
      }

      public bool IsNullable()
      {
        var type = dicType[DATA_TYPE];
        return (dicNullabel[type] && IS_NULLABLE == "YES");
      }

      public string GetSetData(int i)
      {
        var type = dicType[DATA_TYPE];
        var fld = $"fields[{i}]";
        string colname = ColumnIncludeHyphen ? COLUMN_NAME.Replace("-",string.Empty) : COLUMN_NAME;
        if (!IsNullable())
        {
          if (type == "string")
            return $"{colname} = {fld};";

          return $"{colname} = {type}.Parse({fld});";
        }

        return $"{colname} = string.IsNullOrEmpty({fld}) ? ({type}?)null : {type}.Parse({fld});";
      }

      public string GetProperty()
      {
        string rv;
        var type = dicType[DATA_TYPE];
        if(ColumnIncludeHyphen)
        {
          string ALT_COLUMN_NAME = COLUMN_NAME.Replace("-",string.Empty);
          //string[] ar = [
          //  $"",
          //  $"public {type}? {ALT_COLUMN_NAME} {{ get; set; }}"
          //];
          //
          //rv = string.Join('\n',ar);
          rv = $"public {type}? {ALT_COLUMN_NAME} {{ get; set; }}";
        }
        else
        {
          rv = $"public {type}? {COLUMN_NAME} {{ get; set; }}";
        }
        return rv;
      }

      private string GetNullable()
      {
        return IsNullable() ? "?" : "";
      }

      private static Dictionary<string, bool> dicNullabel = new Dictionary<string, bool>()
      {
        {"string", false},
        {"int", true},
        {"byte", true},
        {"short", true},
        {"decimal", true},
        {"bool", true},
        {"DateTime",true },
        {"Decimal",true},
      };

      private static Dictionary<string, string> dicType = new Dictionary<string, string>()
      {
        {"char", "string"},
        {"varchar", "string"},
        {"nvarchar", "string"},
        {"nchar", "string"},
        {"int", "int"},
        {"tinyint", "byte"},
        {"smallint", "short"},
        {"decimal", "decimal"},
        {"bit", "bool"},
        {"datetime", "DateTime"},
        {"date", "string"},
        {"ntext", "string"},
        {"money", "Decimal"},
      };
  }
#>